language: generic
os: osx
osx_image: xcode8
before_install:
- rvm use $(< .ruby-version) --install --binary --fuzzy
install:
- gem install bundler
- bundle install --jobs=3 --retry=3
cache: bundler
env:
  global:
  - NSUnbufferedIO=YES
  matrix:
  - JOB=Test-macOS ACTION=test
matrix:
  include:
  - env: JOB=Test-iOS DEVICE='iPhone 6s (10.0)' PLATFORM='iOS Simulator' ACTION=test
  - env: JOB=Build-tvOS DESTINATION='platform=tvOS Simulator,name=Apple TV 1080p' ACTION=build
  - env: JOB=Build-watchOS DESTINATION='platform=watchOS Simulator,name=Apple Watch - 42mm' ACTION=build
  - os: linux
    dist: trusty
    sudo: required
    addons:
      apt:
        packages:
        - clang-3.8
        - libicu-dev
    env: JOB=Test-Linux COMPILER=clang-3.8
    before_install:
    - wget -q -O - https://swift.org/keys/all-keys.asc | gpg --import -
    install:
    - wget https://swift.org/builds/swift-3.0-release/ubuntu1404/swift-3.0-RELEASE/swift-3.0-RELEASE-ubuntu14.04.tar.gz
    - tar xzf swift-3.0-RELEASE-ubuntu14.04.tar.gz
    - export PATH=swift-3.0-RELEASE-ubuntu14.04/usr/bin:$PATH
    script:
    - swift test
  - env: JOB=Misc
    script:
    - bundle exec pod lib lint --quick
before_script:
- set -o pipefail
- if [[ $DEVICE && $PLATFORM ]]; then
    export DESTINATION_UUID=`instruments -s devices | grep "$DEVICE" | awk -F '[ ]' '{print $4}' | awk -F '[\[]' '{print $2}' | sed 's/.$//'`;
    export DESTINATION="platform=$PLATFORM,id=$DESTINATION_UUID";
    open -b com.apple.iphonesimulator --args -CurrentDeviceUDID $DESTINATION_UUID;
  fi
script:
- if [[ $DESTINATION ]]; then
    xcodebuild $ACTION -scheme Deferred -destination "$DESTINATION" | xcpretty -c;
  else
    swift test;
  fi
after_success:
- if [[ "$JOB" == "Misc" ]]; then
    ./Configurations/publish_docs.sh;
  else
    sleep 5;
  fi
after_failure:
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    cat ~/Library/Developer/Xcode/DerivedData/Deferred-*/Logs/Test/*/Session-DeferredTests-*.log;
  fi
notifications:
  email: false
